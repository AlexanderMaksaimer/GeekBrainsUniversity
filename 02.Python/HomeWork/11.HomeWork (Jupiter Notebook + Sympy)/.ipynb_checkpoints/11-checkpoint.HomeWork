{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e9808015",
   "metadata": {},
   "source": [
    "Дана функция: f(x) = x**2 - 6*abs(x) + 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "604e014d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9fdca3f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "efcf4247",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle x^{2} - 6 \\left|{x}\\right| + 8$"
      ],
      "text/plain": [
       "x**2 - 6*Abs(x) + 8"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = x ** 2 - 6 * abs(x) + 8\n",
    "y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de18bb64",
   "metadata": {},
   "source": [
    "1. Определить корни"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dcbb2b0b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-4, -2, 2, 4]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "root = solve(y)\n",
    "root"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21cd3fa1",
   "metadata": {},
   "source": [
    "2. Построить график"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "18806fce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "functions = plot(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da0d4991",
   "metadata": {},
   "source": [
    "3. Находим производную функции для нахождения экстремумов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6d333fa7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 2 x - 6 \\operatorname{sign}{\\left(x \\right)}$"
      ],
      "text/plain": [
       "2*x - 6*sign(x)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proizv = diff(y)\n",
    "proizv"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53985666",
   "metadata": {},
   "source": [
    "4.Ищем корни производной(точки экстремума)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "400cdcf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roots_proizv = solve(proizv)\n",
    "roots_proizv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dd61b36b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "funtions_proizv = plot(proizv)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf695d79",
   "metadata": {},
   "source": [
    "Основываясь на X в функции, производная равна 0 в двух точках 3 и -3, так же в точке x=0 в функции присутствует излом, который не является экстремумом. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebcdb801",
   "metadata": {},
   "source": [
    "5.Добавляем недостающие точки в корни производной"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "079f0229",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[-3, 0, 3]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roots_proizv.append(roots_proizv[0] * -1)\n",
    "roots_proizv.append(0)\n",
    "roots_proizv = sorted(roots_proizv)\n",
    "roots_proizv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "124f9226",
   "metadata": {},
   "outputs": [],
   "source": [
    "def intervals_creation(roots):\n",
    "    intervals = []\n",
    "    intervals.append([roots[0]-1, roots[0]])\n",
    "    for i in range(len(roots)-1):\n",
    "        r = [roots[i], roots[i+1]]\n",
    "        intervals.append(r)\n",
    "    intervals.append([roots[-1], roots[-1]+1])\n",
    "    return intervals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee842051",
   "metadata": {},
   "source": [
    "6.Поиск вершины"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1a248eb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Точки экстремума функции -3, 3\n"
     ]
    }
   ],
   "source": [
    "print(f'Точки экстремума функции {roots_proizv[0]}, {roots_proizv[-1]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c7ed6471",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "точка минимума ⋁ = \"-3\"\n",
      "точка максимума ⋀ = \"0\"\n",
      "точка минимума ⋁ = \"3\"\n"
     ]
    }
   ],
   "source": [
    "for i in roots_proizv:\n",
    "    left_point = i-0.01 if i == 0 else i-0.01*abs(i)\n",
    "    right_point = i+0.01 if i == 0 else i+0.01*abs(i)\n",
    "    if proizv.evalf(subs={x: left_point}) < proizv.evalf(subs={x: i}) and proizv.evalf(subs={x: right_point}) > proizv.evalf(subs={x: i}):\n",
    "        print(f'точка минимума ⋁ = \"{i}\"')\n",
    "    else:\n",
    "        print(f'точка максимума ⋀ = \"{i}\"')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d920d50",
   "metadata": {},
   "source": [
    "7.Находим интервалы на которых функция возрастает или убывает"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5180297f",
   "metadata": {},
   "outputs": [],
   "source": [
    "intervals = intervals_creation(roots_proizv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cf8e4f6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Функция убывает на промежутке: (-oo, -3)\n",
      "Функция возрастает на промежутке: (-3, 0)\n",
      "Функция убывает на промежутке: (0, 3)\n",
      "Функция возрастает на промежутке: (3, oo)\n"
     ]
    }
   ],
   "source": [
    "for i in intervals:\n",
    "    start_int = -oo if intervals.index(i) == 0 else i[0]\n",
    "    end_int = oo if intervals.index(i) == len(intervals)-1 else i[1]\n",
    "    if proizv.evalf(subs={x:(i[0] + i[1])/2}) > 0:\n",
    "        print(f'Функция возрастает на промежутке: {start_int, end_int}')\n",
    "    else:\n",
    "        print(f'Функция убывает на промежутке: {start_int, end_int}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d75d33ed",
   "metadata": {},
   "source": [
    "8.Находим промежутки, на которых f(x) > 0 и f(x) < 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "26f116da",
   "metadata": {},
   "outputs": [],
   "source": [
    "intervals = intervals_creation(root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b5fe7c75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "функция f(x) > 0 находится на промежутке (-oo, -4)\n",
      "функция f(x) < 0 находится на промежутке (-4, -2)\n",
      "функция f(x) > 0 находится на промежутке (-2, 2)\n",
      "функция f(x) < 0 находится на промежутке (2, 4)\n",
      "функция f(x) > 0 находится на промежутке (4, oo)\n"
     ]
    }
   ],
   "source": [
    "for i in intervals:\n",
    "    start_int = -oo if intervals.index(i) == 0 else i[0]\n",
    "    end_int = oo if intervals.index(i) == len(intervals)-1 else i[1]\n",
    "    if y.evalf(subs={x:(i[0] + i[1])/2}) > 0:\n",
    "        print(f'функция f(x) > 0 находится на промежутке {start_int, end_int}')\n",
    "    else:\n",
    "        print(f'функция f(x) < 0 находится на промежутке {start_int, end_int}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbefa61e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
